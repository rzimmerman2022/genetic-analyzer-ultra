#!/usr/bin/env python3
"""
23andMe Genetic Data Analysis Script
====================================
This script provides educational analysis of 23andMe raw genetic data.

IMPORTANT DISCLAIMER: This script is for educational and informational purposes only.
It does not provide medical advice, diagnosis, or treatment recommendations.
Always consult with qualified healthcare professionals for medical guidance.

Author: Educational Analysis Tool
Version: 1.0
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from collections import defaultdict, Counter
import warnings
import json
from datetime import datetime
import os

warnings.filterwarnings('ignore')

# Configure plotting style for better visualizations
plt.style.use('seaborn-v0_8-darkgrid')
sns.set_palette("husl")

class GeneticAnalyzer:
    """
    A comprehensive analyzer for 23andMe genetic data that provides
    educational insights into genetic variants and patterns.
    """
    
    def __init__(self, filename):
        """Initialize the analyzer with a 23andMe data file."""
        self.filename = filename
        self.data = None
        self.metadata = {}
        self.results = defaultdict(dict)
        
        # Well-studied genetic variants with established associations
        # These are examples from published literature
        self.known_variants = {
            # APOE variants (Alzheimer's risk)
            'rs429358': {
                'gene': 'APOE',
                'trait': 'Alzheimer\'s disease risk',
                'risk_allele': 'C',
                'protective_allele': 'T',
                'effect': 'Major genetic risk factor'
            },
            'rs7412': {
                'gene': 'APOE',
                'trait': 'Alzheimer\'s disease risk',
                'risk_allele': 'T',
                'protective_allele': 'C',
                'effect': 'Modifies APOE status'
            },
            
            # MTHFR variants (folate metabolism)
            'rs1801133': {
                'gene': 'MTHFR',
                'trait': 'Folate metabolism',
                'risk_allele': 'A',
                'normal_allele': 'G',
                'effect': 'Reduced enzyme activity'
            },
            'rs1801131': {
                'gene': 'MTHFR',
                'trait': 'Folate metabolism',
                'risk_allele': 'C',
                'normal_allele': 'A',
                'effect': 'Reduced enzyme activity'
            },
            
            # Lactose tolerance
            'rs4988235': {
                'gene': 'MCM6',
                'trait': 'Lactose tolerance',
                'tolerance_allele': 'A',
                'intolerance_allele': 'G',
                'effect': 'Lactase persistence'
            },
            
            # Caffeine metabolism
            'rs762551': {
                'gene': 'CYP1A2',
                'trait': 'Caffeine metabolism',
                'fast_allele': 'A',
                'slow_allele': 'C',
                'effect': 'Caffeine processing speed'
            },
            
            # Alcohol metabolism
            'rs671': {
                'gene': 'ALDH2',
                'trait': 'Alcohol metabolism',
                'normal_allele': 'G',
                'flush_allele': 'A',
                'effect': 'Alcohol flush reaction'
            },
            
            # Muscle composition
            'rs1815739': {
                'gene': 'ACTN3',
                'trait': 'Muscle composition',
                'power_allele': 'C',
                'endurance_allele': 'T',
                'effect': 'Athletic performance'
            },
            
            # Bitter taste perception
            'rs713598': {
                'gene': 'TAS2R38',
                'trait': 'Bitter taste perception',
                'taster_allele': 'G',
                'non_taster_allele': 'C',
                'effect': 'PTC taste sensitivity'
            }
        }
        
    def load_data(self):
        """Load and parse the 23andMe data file."""
        print("Loading genetic data...")
        
        try:
            # Read the file, skipping comment lines
            with open(self.filename, 'r') as f:
                lines = f.readlines()
            
            # Extract metadata from header comments
            data_lines = []
            for line in lines:
                if line.startswith('#'):
                    if 'generated by 23andMe' in line:
                        self.metadata['source'] = '23andMe'
                    elif 'reference human assembly build' in line:
                        self.metadata['build'] = 'GRCh37/hg19'
                else:
                    data_lines.append(line.strip())
            
            # Parse the genetic data
            # Create DataFrame from non-comment lines
            from io import StringIO
            data_string = '\n'.join(data_lines)
            self.data = pd.read_csv(StringIO(data_string), sep='\t')
            
            # Clean up the data
            self.data.columns = ['rsid', 'chromosome', 'position', 'genotype']
            
            # Convert chromosome to string for consistency
            self.data['chromosome'] = self.data['chromosome'].astype(str)
            
            # Remove any rows with missing genotypes
            self.data = self.data[self.data['genotype'] != '--']
            
            print(f"Successfully loaded {len(self.data)} genetic variants")
            print(f"Chromosomes present: {sorted(self.data['chromosome'].unique())}")
            
        except Exception as e:
            print(f"Error loading data: {e}")
            raise
    
    def analyze_basic_statistics(self):
        """Generate basic statistics about the genetic data."""
        print("\nAnalyzing basic statistics...")
        
        stats = {
            'total_variants': len(self.data),
            'variants_per_chromosome': self.data['chromosome'].value_counts().to_dict(),
            'genotype_distribution': self.data['genotype'].apply(len).value_counts().to_dict()
        }
        
        # Count homozygous vs heterozygous variants
        homozygous = 0
        heterozygous = 0
        
        for genotype in self.data['genotype']:
            if len(genotype) == 2 and genotype[0] == genotype[1]:
                homozygous += 1
            elif len(genotype) == 2 and genotype[0] != genotype[1]:
                heterozygous += 1
        
        stats['homozygous_variants'] = homozygous
        stats['heterozygous_variants'] = heterozygous
        stats['heterozygosity_rate'] = heterozygous / (homozygous + heterozygous) if (homozygous + heterozygous) > 0 else 0
        
        self.results['basic_stats'] = stats
        
        # Print summary
        print(f"Total variants analyzed: {stats['total_variants']:,}")
        print(f"Homozygous variants: {stats['homozygous_variants']:,}")
        print(f"Heterozygous variants: {stats['heterozygous_variants']:,}")
        print(f"Heterozygosity rate: {stats['heterozygosity_rate']:.2%}")
    
    def analyze_known_variants(self):
        """Analyze well-studied genetic variants with known associations."""
        print("\nAnalyzing known genetic variants...")
        
        findings = []
        
        for rsid, info in self.known_variants.items():
            variant_data = self.data[self.data['rsid'] == rsid]
            
            if not variant_data.empty:
                genotype = variant_data.iloc[0]['genotype']
                finding = {
                    'rsid': rsid,
                    'gene': info['gene'],
                    'trait': info['trait'],
                    'genotype': genotype,
                    'interpretation': self._interpret_variant(genotype, info)
                }
                findings.append(finding)
                
                print(f"\n{info['gene']} ({rsid}): {genotype}")
                print(f"  Trait: {info['trait']}")
                print(f"  Interpretation: {finding['interpretation']}")
        
        self.results['known_variants'] = findings
    
    def _interpret_variant(self, genotype, variant_info):
        """Interpret a specific genetic variant based on known associations."""
        interpretation = []
        
        # Handle different types of variant interpretations
        if 'risk_allele' in variant_info:
            risk_count = genotype.count(variant_info['risk_allele'])
            if risk_count == 0:
                interpretation.append("No risk alleles present")
            elif risk_count == 1:
                interpretation.append("One risk allele present (heterozygous)")
            elif risk_count == 2:
                interpretation.append("Two risk alleles present (homozygous)")
        
        if 'fast_allele' in variant_info and 'slow_allele' in variant_info:
            if genotype == variant_info['fast_allele'] * 2:
                interpretation.append("Fast metabolizer genotype")
            elif genotype == variant_info['slow_allele'] * 2:
                interpretation.append("Slow metabolizer genotype")
            else:
                interpretation.append("Intermediate metabolizer genotype")
        
        if 'power_allele' in variant_info and 'endurance_allele' in variant_info:
            if genotype == variant_info['power_allele'] * 2:
                interpretation.append("Power/sprint athlete genotype")
            elif genotype == variant_info['endurance_allele'] * 2:
                interpretation.append("Endurance athlete genotype")
            else:
                interpretation.append("Mixed athletic genotype")
        
        return "; ".join(interpretation) if interpretation else "Standard genotype"
    
    def calculate_ancestry_markers(self):
        """Analyze ancestry-informative markers (AIMs)."""
        print("\nAnalyzing ancestry markers...")
        
        # This is a simplified analysis - real ancestry determination requires
        # sophisticated algorithms and reference populations
        
        # Example ancestry-informative SNPs (these are illustrative)
        ancestry_snps = {
            'rs1426654': {'info': 'SLC24A5 - skin pigmentation', 'ancestral': 'G', 'derived': 'A'},
            'rs16891982': {'info': 'SLC45A2 - skin pigmentation', 'ancestral': 'C', 'derived': 'G'},
            'rs1042602': {'info': 'TYR - eye color', 'ancestral': 'C', 'derived': 'A'},
        }
        
        ancestry_findings = []
        for rsid, info in ancestry_snps.items():
            variant_data = self.data[self.data['rsid'] == rsid]
            if not variant_data.empty:
                genotype = variant_data.iloc[0]['genotype']
                ancestry_findings.append({
                    'rsid': rsid,
                    'info': info['info'],
                    'genotype': genotype,
                    'ancestral_alleles': genotype.count(info['ancestral']),
                    'derived_alleles': genotype.count(info['derived'])
                })
        
        self.results['ancestry_markers'] = ancestry_findings
    
    def generate_visualizations(self):
        """Create visualizations of the genetic data."""
        print("\nGenerating visualizations...")
        
        # Create output directory for plots
        os.makedirs('genetic_analysis_plots', exist_ok=True)
        
        # 1. Variants per chromosome
        plt.figure(figsize=(12, 6))
        chrom_counts = self.data['chromosome'].value_counts().sort_index()
        plt.bar(chrom_counts.index, chrom_counts.values)
        plt.xlabel('Chromosome')
        plt.ylabel('Number of Variants')
        plt.title('Distribution of Genetic Variants Across Chromosomes')
        plt.xticks(rotation=45)
        plt.tight_layout()
        plt.savefig('genetic_analysis_plots/variants_per_chromosome.png', dpi=300)
        plt.close()
        
        # 2. Genotype distribution pie chart
        plt.figure(figsize=(8, 8))
        genotype_types = ['Homozygous', 'Heterozygous']
        genotype_counts = [
            self.results['basic_stats']['homozygous_variants'],
            self.results['basic_stats']['heterozygous_variants']
        ]
        plt.pie(genotype_counts, labels=genotype_types, autopct='%1.1f%%', startangle=90)
        plt.title('Distribution of Homozygous vs Heterozygous Variants')
        plt.tight_layout()
        plt.savefig('genetic_analysis_plots/genotype_distribution.png', dpi=300)
        plt.close()
        
        print("Visualizations saved to 'genetic_analysis_plots' directory")
    
    def generate_report(self):
        """Generate a comprehensive analysis report."""
        print("\nGenerating comprehensive report...")
        
        report_filename = f"genetic_analysis_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        
        with open(report_filename, 'w') as f:
            f.write("="*80 + "\n")
            f.write("23andMe Genetic Data Analysis Report\n")
            f.write("="*80 + "\n\n")
            
            f.write("IMPORTANT DISCLAIMER:\n")
            f.write("-"*40 + "\n")
            f.write("This report is for educational and informational purposes only.\n")
            f.write("It does not constitute medical advice, diagnosis, or treatment.\n")
            f.write("Please consult healthcare professionals for medical guidance.\n\n")
            
            f.write("Report Generated: " + datetime.now().strftime('%Y-%m-%d %H:%M:%S') + "\n")
            f.write("Data Source: " + self.metadata.get('source', 'Unknown') + "\n")
            f.write("Reference Build: " + self.metadata.get('build', 'Unknown') + "\n\n")
            
            # Basic Statistics
            f.write("BASIC STATISTICS\n")
            f.write("-"*40 + "\n")
            stats = self.results['basic_stats']
            f.write(f"Total Variants Analyzed: {stats['total_variants']:,}\n")
            f.write(f"Homozygous Variants: {stats['homozygous_variants']:,}\n")
            f.write(f"Heterozygous Variants: {stats['heterozygous_variants']:,}\n")
            f.write(f"Heterozygosity Rate: {stats['heterozygosity_rate']:.2%}\n\n")
            
            # Known Variants Analysis
            f.write("ANALYSIS OF WELL-STUDIED GENETIC VARIANTS\n")
            f.write("-"*40 + "\n")
            f.write("The following variants have been extensively studied in scientific literature:\n\n")
            
            for finding in self.results.get('known_variants', []):
                f.write(f"Gene: {finding['gene']}\n")
                f.write(f"Variant ID: {finding['rsid']}\n")
                f.write(f"Your Genotype: {finding['genotype']}\n")
                f.write(f"Associated Trait: {finding['trait']}\n")
                f.write(f"Interpretation: {finding['interpretation']}\n")
                f.write("\n")
            
            # Ancestry Markers
            f.write("ANCESTRY-INFORMATIVE MARKERS\n")
            f.write("-"*40 + "\n")
            f.write("These markers can provide hints about ancestral origins:\n\n")
            
            for marker in self.results.get('ancestry_markers', []):
                f.write(f"Marker: {marker['rsid']} - {marker['info']}\n")
                f.write(f"Your Genotype: {marker['genotype']}\n")
                f.write(f"Ancestral alleles: {marker['ancestral_alleles']}, ")
                f.write(f"Derived alleles: {marker['derived_alleles']}\n\n")
            
            # Educational Notes
            f.write("\nEDUCATIONAL NOTES\n")
            f.write("-"*40 + "\n")
            f.write("1. Genetic variants are just one factor in health and traits.\n")
            f.write("2. Environmental factors often play a larger role than genetics.\n")
            f.write("3. Most traits are polygenic (influenced by many genes).\n")
            f.write("4. Scientific understanding of genetics continues to evolve.\n")
            f.write("5. Consider genetic counseling for health-related questions.\n")
            
            f.write("\n" + "="*80 + "\n")
            f.write("End of Report\n")
            f.write("="*80 + "\n")
        
        print(f"Report saved as: {report_filename}")
        return report_filename
    
    def run_complete_analysis(self):
        """Run the complete analysis pipeline."""
        print("Starting comprehensive genetic analysis...\n")
        
        # Load the data
        self.load_data()
        
        # Run analyses
        self.analyze_basic_statistics()
        self.analyze_known_variants()
        self.calculate_ancestry_markers()
        
        # Generate outputs
        self.generate_visualizations()
        report_filename = self.generate_report()
        
        print("\n" + "="*80)
        print("ANALYSIS COMPLETE!")
        print("="*80)
        print(f"\nYour personalized report has been saved as: {report_filename}")
        print("Visualization plots have been saved in: genetic_analysis_plots/")
        print("\nKey findings summary:")
        print(f"- Analyzed {self.results['basic_stats']['total_variants']:,} genetic variants")
        print(f"- Heterozygosity rate: {self.results['basic_stats']['heterozygosity_rate']:.2%}")
        print(f"- Found {len(self.results.get('known_variants', []))} well-studied variants in your data")
        print("\nRemember: This analysis is for educational purposes only.")
        print("Please consult healthcare professionals for medical interpretation.")

def main():
    """Main function to run the genetic analysis."""
    print("23andMe Genetic Data Analyzer")
    print("="*40)
    
    # Get the filename from user
    filename = input("Enter the path to your 23andMe data file (or press Enter for 'paste.txt'): ").strip()
    if not filename:
        filename = 'paste.txt'
    
    # Check if file exists
    if not os.path.exists(filename):
        print(f"Error: File '{filename}' not found!")
        print("Please make sure your 23andMe data file is in the current directory.")
        return
    
    # Create analyzer and run analysis
    try:
        analyzer = GeneticAnalyzer(filename)
        analyzer.run_complete_analysis()
    except Exception as e:
        print(f"\nAn error occurred during analysis: {e}")
        print("Please check your data file format and try again.")

if __name__ == "__main__":
    main()