import pytest
from genetic_analyzer import GeneticAnalyzer
import os

HEADER = """# This is a mock 23andMe file
# generated by 23andMe mock data
# reference human assembly build GRCh37/hg19
"""

# Utility to write a small 23andMe-style tab-delimited file with given genotypes
def write_mock_file(tmp_path, entries):
    path = tmp_path / "mock23andme.txt"
    with open(path, "w") as f:
        f.write(HEADER)
        f.write("rsid\tchromosome\tposition\tgenotype\n")
        for rsid, genotype in entries.items():
            # use dummy chromosome and position
            f.write(f"{rsid}\t19\t0\t{genotype}\n")
    return str(path)

def test_apoe_heterozygote_or(tmp_path):
    # rs429358 heterozygote (one C risk allele)
    entries = {
        "rs429358": "CT",  # one C -> heterozygous
        "rs7412": "TT"     # no C risk at rs7412
    }
    mock_file = write_mock_file(tmp_path, entries)
    analyzer = GeneticAnalyzer(mock_file)
    analyzer.load_data()
    analyzer.analyze_known_variants()
    findings = {f["rsid"]: f["interpretation"] for f in analyzer.results["known_variants"]}
    interp = findings.get("rs429358", "")
    assert "Approximate OR: 3.70 (95% CI 3.20–4.20) for heterozygote" in interp

def test_apoe_homozygote_or(tmp_path):
    # rs429358 homozygote (two C risk alleles)
    entries = {
        "rs429358": "CC",  # two C -> homozygous
        "rs7412": "CC"     # ignore second SNP's risk allele for this test
    }
    mock_file = write_mock_file(tmp_path, entries)
    analyzer = GeneticAnalyzer(mock_file)
    analyzer.load_data()
    analyzer.analyze_known_variants()
    findings = {f["rsid"]: f["interpretation"] for f in analyzer.results["known_variants"]}
    interp = findings.get("rs429358", "")
    # OR_hom = 3.7**2 ≈ 13.69
    assert "Approximate OR: 13.69 (95% CI 10.24–17.64) for homozygote" in interp
